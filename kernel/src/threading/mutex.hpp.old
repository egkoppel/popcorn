/*
 * Copyright (c) 2022 Eliyahu Gluschove-Koppel.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef HUGOS_MUTEX_HPP
#define HUGOS_MUTEX_HPP

#include "task.hpp"

namespace threads {
	class Mutex {
	private:
		bool locked = false;
		std::deque<std::shared_ptr<Task>> waiting_tasks;

		inline void add_waiting_task(const std::shared_ptr<Task>& task) {
			this->waiting_tasks
			    .push_back(task);
		}

		std::shared_ptr<Task> get_next_waiting_task();

	public:
		void lock();
		uint64_t try_lock();
		void unlock();
	};
} // threads

#endif //HUGOS_MUTEX_HPP
