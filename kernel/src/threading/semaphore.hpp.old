/*
 * Copyright (c) 2023 Eliyahu Gluschove-Koppel.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef HUGOS_SEMAPHORE_HPP
#define HUGOS_SEMAPHORE_HPP

#include "task.hpp"

namespace threads {
	class Semaphore {
	private:
		uint64_t count = 0;
		uint64_t max_count;
		std::deque<std::shared_ptr<Task>> waiting_tasks;

		inline void add_waiting_task(std::shared_ptr<Task> task) {
			this->waiting_tasks
			    .push_back(task);
		}

		std::shared_ptr<Task> get_next_waiting_task();

	public:
		Semaphore(uint64_t max_count) : max_count(max_count) {}

		void post();
		void wait();
		uint64_t get_count() { return this->count; }
	};
} // threads

#endif //HUGOS_SEMAPHORE_HPP
