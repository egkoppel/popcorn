/*
 * Copyright (c) 2022 Eliyahu Gluschove-Koppel.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _HUGOS_NEW_H
#define _HUGOS_NEW_H

#include <stddef.h>
#include <exception>

namespace std {
	class bad_alloc : public exception {
	public:
		bad_alloc() noexcept = default;
		bad_alloc(const bad_alloc& other) noexcept = default;
		const char *what() const noexcept override { return "std::bad_alloc"; }
	};
}

void *operator new(size_t size) noexcept(false);
void *operator new[](size_t size) noexcept(false);

void operator delete(void *p) noexcept;
void operator delete[](void *p) noexcept;

inline void *operator new(size_t, void *p) { return p; }
inline void *operator new[](size_t, void *p) { return p; }

inline void operator delete(void *, void *) {}
inline void operator delete[](void *, void *) {}

#endif